<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
   

       <!-- -->
       <!-- 扫描service自动注入为bean -->
       <!--<context:component-scan base-package="com.sprite.services.Impl, com.sprite.dao.Impl"/>-->
       <context:component-scan base-package="com._22evil"/>

       <!-- 处理定时任务 -->
       <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
       <task:scheduler id="qbScheduler" pool-size="10"/>

       <!-- 处理异常 -->
       <bean id="exceptionHandler" class="com._22evil.netty_test.http_server_spring.controller.DefaultExceptionResolver" />
       <!-- 处理返回json的解析,处理报错406 -->
       <bean id="mappingJacksonHttpMessageConverter"
             class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
              <property name="supportedMediaTypes">
                     <list>
                            <value>text/html;charset=UTF-8</value>
                     </list>
              </property>
       </bean>

       <!-- 中文问题 -->
  
      <bean class="org.springframework.http.converter.StringHttpMessageConverter">  
            <property name="supportedMediaTypes" value="text/html;charset=UTF-8"/>  
      </bean>  

      
       <!-- 引入properties配置文件 -->
       <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
              <property name="locations">
                     <list>
                            <value>classpath:*.properties</value>
                            <!--要是有多个配置文件，只需在这里继续添加即可 -->
                     </list>
              </property>
       </bean>

      <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
            destroy-method="close">
            <property name="driverClass" value="${jdbc.driver}"/>
            <property name="jdbcUrl" value="${jdbc.url}"/>
            <property name="user" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>

            <!-- 请求超时时间 -->
            <property name="checkoutTimeout" value="30000"/>
            <!-- 每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
            <property name="idleConnectionTestPeriod" value="30"/>
            <!-- 连接数据库连接池最大空闲时间 -->
            <property name="maxIdleTime" value="30"/>
            <!-- 连接池初始化连接数 -->
            <property name="initialPoolSize" value="5"/>
            <property name="minPoolSize" value="5"/>
            <property name="maxPoolSize" value="20"/>
            <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
            <property name="acquireIncrement" value="5"/>
      </bean>
      <!-- 配置hibernate的SessionFactory -->
      <bean id="sessionFactory"
            class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
            <!-- 注入数据源 相关信息看源码 -->
            <property name="dataSource" ref="dataSource"/>
            <!-- hibernate配置信息 -->

            <property name="hibernateProperties">
                  <props>
                  <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                  <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                  <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                  <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                  <prop key="default_batch_fetch_size">${hibernate.batch}</prop>
                  <!--&lt;!&ndash;开启二级缓存 ehcache&ndash;&gt;-->
                  <!--<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>-->
                  <!--<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>-->
                  <!--<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>-->
                  <!--<prop key="hibernate.cache.provider_configuration_file_resource_path">-->
                  <!--${hibernate.cache.provider_configuration_file_resource_path}-->
                  <!--</prop>-->
                  </props>
            </property>
            <!-- 扫描hibernate注解配置的entity -->
            <property name="packagesToScan" value="com._22evil"/>
      </bean>
      <!-- 配置事务管理器 -->
      <bean id="transactionManager"
            class="org.springframework.orm.hibernate4.HibernateTransactionManager">
            <property name="sessionFactory" ref="sessionFactory"/>
      </bean>


       <!--&lt;!&ndash; 配置redis池，依次为最大实例数，最大空闲实例数，(创建实例时)最大等待时间，(创建实例时)是否验证 &ndash;&gt;-->
       <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
              <!--&lt;!&ndash;<property name="maxTotal" value="${redis.maxTotal}"/>&ndash;&gt;-->
              <!--<property name="maxIdle" value="${redis.maxIdle}"/>-->
              <!--<property name="maxWaitMillis" value="${redis.maxWait}"/>-->
              <!--<property name="testOnBorrow" value="${redis.testOnBorrow}"/>-->
       <!--</bean>-->

       <!--&lt;!&ndash; redis连接配置，依次为主机ip，端口，是否使用池，(usePool=true时)redis的池配置 &ndash;&gt;-->
       <!--<bean id="jedisFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
              <!--<property name="hostName" value="${redis.host}"/>-->
              <!--<property name="port" value="${redis.port}"/>-->
              <!--<property name="usePool" value="true"/>-->
              <!--<property name="poolConfig" ref="jedisPoolConfig"/>-->
       <!--</bean>-->

       <!--&lt;!&ndash; redis模板配置 &ndash;&gt;-->
       <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
              <!--<property name="connectionFactory" ref="jedisFactory"/>-->
              <!--<property name="defaultSerializer">-->
                     <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
              <!--</property>-->
       <!--</bean>-->

</beans>
